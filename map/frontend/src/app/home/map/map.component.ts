import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgStyle } from '@angular/common';
import { NgFor } from '@angular/common';
import { ToastrService } from 'ngx-toastr';

declare var $: any;

@Component({
	selector: 'app-map',
	standalone: true,
	imports: [CommonModule],
	templateUrl: './map.component.html',
	styleUrl: './map.component.css'
})

// 17 total grids
// Grids go down in width from 1-9 then up from 9-17
// cell heights are either 11 or 12 pixels
// cell widths vary

export class MapComponent {

	constructor(private toastr: ToastrService) {}

	public gridmap: any = {
    "0": {
        "h": [11],
        "w": [666, 667,
					666, 667,
					666, 667],
        "ch": 1,
				"cw": 6
    },
    "1": {
        "h": [11],
        "w": [166, 167, 167, 166, 167, 166, 167, 167,
					166, 167, 167, 166, 167, 166, 167, 167,
					166, 167, 167, 166, 167, 166, 167, 167],
        "ch": 1,
				"cw": 24
    },
		"2": {
			"h": [11],
			"w": [95, 95, 95, 96, 95, 95, 95,
			95, 96, 95, 95, 95, 95, 96,
			95, 95, 95, 96, 95, 95, 95,
			95, 96, 95, 95, 95, 95, 96,
			95, 95, 95, 96, 95, 95, 95,
			95, 96, 95, 95, 95, 95, 96],
			"ch": 1,
			"cw": 42
		},
		"3": {
			"h": [11, 11, 12, 11, 11, 11, 11, 11, 11, 11],
			"w": [66, 67, 67, 66, 67, 67, 66, 67, 67, 66,
				67, 67, 66, 67, 66, 67, 67, 66, 67, 67,
				66, 67, 67, 66, 67, 67, 66, 67, 67, 66,
				67, 67, 66, 67, 66, 67, 67, 66, 67, 67,
				66, 67, 67, 66, 67, 67, 66, 67, 67, 66,
				67, 67, 66, 67, 66, 67, 67, 66, 67, 67,],
			"ch": 10,
			"cw": 60
		},
		"4": {
			"h": [11, 12, 11, 11, 11, 11, 11, 11, 11, 11],
			"w": [33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33,
				34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33,
				33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33,
				34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33,
				33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33,
				34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33,],
			"ch": 10,
			"cw": 120
		},
		"5": {
			"h": [12, 11, 11, 11, 11, 11, 11, 11, 11, 12, 11],
			"w": [22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22,
				22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23,
				22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22,
				22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23,
				22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22,
				22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23,],
			"ch": 11,
			"cw": 180
		},
		"6": {
			"h": [11, 11, 11, 11, 11, 11, 11, 12, 11, 11, 11, 11, 11],
			"w": [16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16,
				17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17,
				16, 17, 17, 16, 17, 16, 17, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16,
				17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17,
				16, 17, 17, 16, 17, 16, 17, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16,
				17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17,],
			"ch": 13,
			"cw": 240
		},
		"7": {
			"h": [11, 11, 11, 11, 12, 11, 11, 11, 11, 11, 11, 11, 11, 12, 11, 11, 11, 11],
			"w": [13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
		
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
		
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,],
			"ch": 18,
			"cw": 300
		},
		"8": {
			"h": [11, 11, 11, 11, 12, 11, 11, 11, 11, 11,
				11, 11, 11, 12, 11, 11, 11, 11, 11, 11,
				11, 11, 11, 12, 11, 12, 11, 11, 11, 11,
				11, 11, 11, 11, 12, 11, 11, 11, 11, 11,
				11, 11, 11, 12, 11, 11, 11, 11, 11, 11],
			"w": [11, 11, 11, 11, 11, 11, 11, 12, 11, 11,
				11, 11, 11, 11, 11, 11, 12, 11, 11, 11,
				11, 11, 11, 11, 11, 12, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 12, 11, 11, 11, 11,
				11, 11, 11, 11, 12, 11, 11, 11, 11, 11,
				11, 11, 11, 12, 11, 11, 11, 11, 11, 11,
			
				11, 11, 12, 11, 11, 11, 11, 11, 11, 11,
				11, 12, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 12, 11, 11, 11, 11, 11, 11, 11, 11,
				12, 11, 11, 11, 11, 11, 11, 11, 11, 12,
				11, 11, 11, 11, 11, 11, 11, 11, 12, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 12, 11,
			
			
				11, 11, 11, 11, 11, 11, 11, 12, 11, 11,
				11, 11, 11, 11, 11, 11, 12, 11, 11, 11,
				11, 11, 11, 11, 11, 12, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 12, 11, 11, 11, 11,
				11, 11, 11, 11, 12, 11, 11, 11, 11, 11,
				11, 11, 11, 12, 11, 11, 11, 11, 11, 11,
			
				11, 11, 12, 11, 11, 11, 11, 11, 11, 11,
				11, 12, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 12, 11, 11, 11, 11, 11, 11, 11, 11,
				12, 11, 11, 11, 11, 11, 11, 11, 11, 12,
				11, 11, 11, 11, 11, 11, 11, 11, 12, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 12, 11,
			
			
				11, 11, 11, 11, 11, 11, 11, 12, 11, 11,
				11, 11, 11, 11, 11, 11, 12, 11, 11, 11,
				11, 11, 11, 11, 11, 12, 11, 11, 11, 11,
				11, 11, 11, 11, 11, 12, 11, 11, 11, 11,
				11, 11, 11, 11, 12, 11, 11, 11, 11, 11,
				11, 11, 11, 12, 11, 11, 11, 11, 11, 11,
			
				11, 11, 12, 11, 11, 11, 11, 11, 11, 11,
				11, 12, 11, 11, 11, 11, 11, 11, 11, 11,
				11, 12, 11, 11, 11, 11, 11, 11, 11, 11,
				12, 11, 11, 11, 11, 11, 11, 11, 11, 12,
				11, 11, 11, 11, 11, 11, 11, 11, 12, 11,
				11, 11, 11, 11, 11, 11, 11, 11, 12, 11,],
			"ch": 50,
			"cw": 360
		},
		"9": {
			"h": [11, 11, 11, 12, 11, 11, 11, 11, 11, 11, 11, 11, 12, 11, 11, 11, 11, 11],
			"w": [13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
		
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
		
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 13, 14, 13, 13, 14, 13, 13, 14,
			13, 13, 14, 13, 13, 14, 13, 13, 14, 13,
			13, 14, 13, 13, 14, 13, 13, 14, 13, 13,
			14, 13, 13, 14, 13, 13, 14, 13, 13, 14,],
			"ch": 18,
			"cw": 300
		},
		"10": {
			"h": [11, 11, 11, 12, 11, 11, 11, 11, 11, 11, 11, 11, 12],
			"w": [16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16,
				17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17,
				16, 17, 17, 16, 17, 16, 17, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16,
				17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17,
				16, 17, 17, 16, 17, 16, 17, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16,
				17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17,],
			"ch": 13,
			"cw": 240
		},
		"11": {
			"h": [11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 11],
			"w": [22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22,
				22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23,
				22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22,
				22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23,
				22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22,
				22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 22, 23, 22, 22, 22, 22, 23,],
			"ch": 11,
			"cw": 180
		},
		"12": {
			"h": [11, 11, 11, 11, 11, 11, 11, 12, 11, 11],
			"w": [33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33,
				34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33,
				33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33,
				34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33,
				33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33,
				34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33, 33, 34, 33,],
			"ch": 10,
			"cw": 120
		},
		"13": {
			"h": [11, 11, 11, 11, 11, 11, 12, 11, 11, 11],
			"w": [66, 67, 67, 66, 67, 67, 66, 67, 67, 66,
				67, 67, 66, 67, 66, 67, 67, 66, 67, 67,
				66, 67, 67, 66, 67, 67, 66, 67, 67, 66,
				67, 67, 66, 67, 66, 67, 67, 66, 67, 67,
				66, 67, 67, 66, 67, 67, 66, 67, 67, 66,
				67, 67, 66, 67, 66, 67, 67, 66, 67, 67,],
			"ch": 10,
			"cw": 60
		},
		"14": {
			"h": [11],
			"w": [95, 95, 95, 96, 95, 95, 95,
			95, 96, 95, 95, 95, 95, 96,
			95, 95, 95, 96, 95, 95, 95,
			95, 96, 95, 95, 95, 95, 96,
			95, 95, 95, 96, 95, 95, 95,
			95, 96, 95, 95, 95, 95, 96],
			"ch": 1,
			"cw": 42
		},
		"15": {
				"h": [11],
				"w": [166, 167, 167, 166, 167, 166, 167, 167,
					166, 167, 167, 166, 167, 166, 167, 167,
					166, 167, 167, 166, 167, 166, 167, 167],
				"ch": 1,
				"cw": 24
		},
		"16": {
			"h": [11],
			"w": [666, 667,
				666, 667,
				666, 667],
			"ch": 1,
			"cw": 6
		},
	};

	public cultures: any = [
		{
			'id': 0,
			'name': 'wajahe',
			'player': 'sol',
			'color': '#9F2B68',
			'observer': false,
			'agriculture': 'irrigation',
			'state': 'mature_state'
		},
		{
			'id': 1,
			'name': 'rivermen',
			'player': 'sword',
			'color': '#FF0000',
			'observer': false,
			'agriculture': 'irrigation',
			'state': 'mature_state'
		},
		{
			'id': 2,
			'name': 'ejee',
			'player': 'cted',
			'color': '#964B00',
			'observer': false,
			'agriculture': 'irrigation',
			'state': 'mature_state'
		}
	]

	public gridMat: Array<any> = [];
	public mode: string = "select"
	public bgIm: string = '../../assets/terrain_aligned.png';
	public mapmode: string = '';
	public selectedCulture: string = '';
	public selectedColor: string = '';

	ngOnInit() {
		$('.ui.dropdown').dropdown();
		$('#mapmodeDropdown').dropdown('set selected', 'terrain');
		$('#mapmodeDropdown').dropdown({onChange: this.changeMapmode.bind(this)});
		$('#cultureDropdown').dropdown({onChange: this.cdChange.bind(this)});

		this.generateGrid();
	}

	generateGrid() {
		this.gridMat = [];
		for (let i = 0; i < 17; i++) {
			const el = this.gridmap[i.toString()];
			const rowdim = el["ch"];
			const coldim = el["cw"];
			var smgrid:any = [];
			for (let j = 0; j < rowdim; j++) {
				smgrid[j] = []
				for (let k = 0; k < coldim; k++) {
					// include colors here
					smgrid[j][k] = {
						'height': el["h"][j],
						'width': el["w"][k],
						'i': i,
						'j': j,
						'k': k,
						'color': '#000000',
						'opacity': '0%',
						'small_outpost': false,
						'camp': false,
						'large_outpost': false,
						'pen': false,
						'village': false,
						'city': false,
						'citadel': false,
						'port': false,
						'farm': false,
						'trade': false,
						'misc': false,
						'culture': null
					};
				}
			}
			this.gridMat.push(smgrid);
		}
	}

	changeMapmode() {
		this.mapmode = $('#mapmodeDropdown').dropdown('get value');
		console.log(this.mapmode)
		if (this.mapmode === 'terrain') {
			this.bgIm = '../../assets/terrain_aligned.png';
		} else if (this.mapmode === 'fertility') {
			this.bgIm = '../../assets/fert_aligned.png';
		} else if (this.mapmode === 'tile') {
			this.bgIm = '../../assets/tiles_aligned.png';
		} else {
			this.bgIm = '../../assets/metals_aligned.png';
		}
	}

	cdChange() {
		this.selectedCulture = $('#cultureDropdown').dropdown('get value');
		for (let index = 0; index < this.cultures.length; index++) {
			const culture = this.cultures[index];
			if (this.selectedCulture === (culture.player + ' (' + culture.name + ')')) {
				this.selectedColor = culture.color;
				break;
			} else {
				console.log(culture.player + '(' + culture.name + ')');
			}
		}
		console.log(this.selectedCulture);
	}

	interaction(i:number, j:number, k:number) {
		let cell = this.gridMat[i][j][k];
		console.log(cell);
		console.log(this.selectedColor, this.selectedCulture)

		switch(this.mode) {
			case 'select':
				if (cell.culture != null) {
					this.selectedCulture = cell.culture;
					this.selectedColor = cell.color;
				}
				break;
			case 'paint':
				if (this.selectedCulture != '') {
					cell.culture = this.selectedCulture;
					cell.color = this.selectedColor;
					cell.opacity = '60%'
				}
				break;
			case 'smalloutpost':
				if (cell.culture != null) {
					this.clear_settlements(cell);
					cell.small_outpost = true;
				}
				cell.port = false;
				break;
			case 'camp':
				if (cell.culture != null) {
					this.clear_settlements(cell);
					cell.camp = true;
				}
				cell.port = false;
				break;
			case 'largeoutpost':
				if (cell.culture != null) {
					this.clear_settlements(cell);
					cell.large_outpost = true;
				}
				cell.port = false;
				break;
			case 'pen':
				if (cell.culture != null) {
					this.clear_settlements(cell);
					cell.pen = true;
				}
				cell.port = false;
				break;
			case 'village':
				if (cell.culture != null) {
					this.clear_settlements(cell);
					cell.village = true;
				}
				break;
			case 'city':
				if (cell.culture != null) {
					this.clear_settlements(cell);
					cell.city = true;
				}
				break;
			case 'citadel':
				if (cell.culture != null) {
					this.clear_settlements(cell);
					cell.citadel = true;
				}
				cell.port = false;
				break;
			case 'port':
				if (cell.culture != null) {
					if (cell.village || cell.citadel || cell.city) {
						cell.port = true;
					} else {
						this.toastr.error('Ports require a village, city, or citadel', 'Error');
					}
				}
				break;
			case 'trade':
				if (cell.culture != null) {
					if (cell.pen || cell.village || cell.citadel || cell.city) {
						cell.trade = true;
					} else {
						this.toastr.error('Trade Modifiers require a tier 2 settlement', 'Error');
					}
				}
				break;
			case 'misc':
				if (cell.culture != null) {
					cell.misc = true;
				}
				break;
		}
	}

	clear_settlements(cell: any) {
		cell.small_outpost = false;
		cell.camp = false;
		cell.large_outpost = false;
		cell.pen = false;
		cell.village = false;
		cell.city = false;
		cell.citadel = false;
	}
}
